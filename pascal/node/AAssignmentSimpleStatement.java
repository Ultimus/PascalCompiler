/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class AAssignmentSimpleStatement extends PSimpleStatement
{
    private TIdentifier _identifier_;
    private TAssign _assign_;
    private PExprTop _exprTop_;

    public AAssignmentSimpleStatement()
    {
        // Constructor
    }

    public AAssignmentSimpleStatement(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") PExprTop _exprTop_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setAssign(_assign_);

        setExprTop(_exprTop_);

    }

    @Override
    public Object clone()
    {
        return new AAssignmentSimpleStatement(
            cloneNode(this._identifier_),
            cloneNode(this._assign_),
            cloneNode(this._exprTop_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignmentSimpleStatement(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public PExprTop getExprTop()
    {
        return this._exprTop_;
    }

    public void setExprTop(PExprTop node)
    {
        if(this._exprTop_ != null)
        {
            this._exprTop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprTop_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._assign_)
            + toString(this._exprTop_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._exprTop_ == child)
        {
            this._exprTop_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._exprTop_ == oldChild)
        {
            setExprTop((PExprTop) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
