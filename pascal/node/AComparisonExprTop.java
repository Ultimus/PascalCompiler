/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class AComparisonExprTop extends PExprTop
{
    private PExprTop _exprTop_;
    private PCompare _compare_;
    private PExpr _expr_;

    public AComparisonExprTop()
    {
        // Constructor
    }

    public AComparisonExprTop(
        @SuppressWarnings("hiding") PExprTop _exprTop_,
        @SuppressWarnings("hiding") PCompare _compare_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setExprTop(_exprTop_);

        setCompare(_compare_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new AComparisonExprTop(
            cloneNode(this._exprTop_),
            cloneNode(this._compare_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComparisonExprTop(this);
    }

    public PExprTop getExprTop()
    {
        return this._exprTop_;
    }

    public void setExprTop(PExprTop node)
    {
        if(this._exprTop_ != null)
        {
            this._exprTop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprTop_ = node;
    }

    public PCompare getCompare()
    {
        return this._compare_;
    }

    public void setCompare(PCompare node)
    {
        if(this._compare_ != null)
        {
            this._compare_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compare_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exprTop_)
            + toString(this._compare_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exprTop_ == child)
        {
            this._exprTop_ = null;
            return;
        }

        if(this._compare_ == child)
        {
            this._compare_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exprTop_ == oldChild)
        {
            setExprTop((PExprTop) newChild);
            return;
        }

        if(this._compare_ == oldChild)
        {
            setCompare((PCompare) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
