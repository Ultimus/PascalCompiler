/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import java.util.*;
import pascal.analysis.*;

@SuppressWarnings("nls")
public final class ADeclarations extends PDeclarations
{
    private final LinkedList<PVariablesDeclaration> _variablesDeclaration_ = new LinkedList<PVariablesDeclaration>();

    public ADeclarations()
    {
        // Constructor
    }

    public ADeclarations(
        @SuppressWarnings("hiding") List<?> _variablesDeclaration_)
    {
        // Constructor
        setVariablesDeclaration(_variablesDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new ADeclarations(
            cloneList(this._variablesDeclaration_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarations(this);
    }

    public LinkedList<PVariablesDeclaration> getVariablesDeclaration()
    {
        return this._variablesDeclaration_;
    }

    public void setVariablesDeclaration(List<?> list)
    {
        for(PVariablesDeclaration e : this._variablesDeclaration_)
        {
            e.parent(null);
        }
        this._variablesDeclaration_.clear();

        for(Object obj_e : list)
        {
            PVariablesDeclaration e = (PVariablesDeclaration) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variablesDeclaration_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variablesDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variablesDeclaration_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PVariablesDeclaration> i = this._variablesDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariablesDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
