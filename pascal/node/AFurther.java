/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class AFurther extends PFurther
{
    private TLPar _lPar_;
    private PBExpr _bExpr_;
    private TRPar _rPar_;
    private TThen _then_;
    private PStatementSequence _statementSequence_;

    public AFurther()
    {
        // Constructor
    }

    public AFurther(
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PBExpr _bExpr_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PStatementSequence _statementSequence_)
    {
        // Constructor
        setLPar(_lPar_);

        setBExpr(_bExpr_);

        setRPar(_rPar_);

        setThen(_then_);

        setStatementSequence(_statementSequence_);

    }

    @Override
    public Object clone()
    {
        return new AFurther(
            cloneNode(this._lPar_),
            cloneNode(this._bExpr_),
            cloneNode(this._rPar_),
            cloneNode(this._then_),
            cloneNode(this._statementSequence_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFurther(this);
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PBExpr getBExpr()
    {
        return this._bExpr_;
    }

    public void setBExpr(PBExpr node)
    {
        if(this._bExpr_ != null)
        {
            this._bExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bExpr_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PStatementSequence getStatementSequence()
    {
        return this._statementSequence_;
    }

    public void setStatementSequence(PStatementSequence node)
    {
        if(this._statementSequence_ != null)
        {
            this._statementSequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementSequence_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lPar_)
            + toString(this._bExpr_)
            + toString(this._rPar_)
            + toString(this._then_)
            + toString(this._statementSequence_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._bExpr_ == child)
        {
            this._bExpr_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._statementSequence_ == child)
        {
            this._statementSequence_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._bExpr_ == oldChild)
        {
            setBExpr((PBExpr) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._statementSequence_ == oldChild)
        {
            setStatementSequence((PStatementSequence) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
