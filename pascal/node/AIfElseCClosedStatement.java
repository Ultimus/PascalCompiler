/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseCClosedStatement extends PClosedStatement
{
    private PIfClosedElse _ifClosedElse_;
    private PClosedStatement _closedStatement_;

    public AIfElseCClosedStatement()
    {
        // Constructor
    }

    public AIfElseCClosedStatement(
        @SuppressWarnings("hiding") PIfClosedElse _ifClosedElse_,
        @SuppressWarnings("hiding") PClosedStatement _closedStatement_)
    {
        // Constructor
        setIfClosedElse(_ifClosedElse_);

        setClosedStatement(_closedStatement_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseCClosedStatement(
            cloneNode(this._ifClosedElse_),
            cloneNode(this._closedStatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseCClosedStatement(this);
    }

    public PIfClosedElse getIfClosedElse()
    {
        return this._ifClosedElse_;
    }

    public void setIfClosedElse(PIfClosedElse node)
    {
        if(this._ifClosedElse_ != null)
        {
            this._ifClosedElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifClosedElse_ = node;
    }

    public PClosedStatement getClosedStatement()
    {
        return this._closedStatement_;
    }

    public void setClosedStatement(PClosedStatement node)
    {
        if(this._closedStatement_ != null)
        {
            this._closedStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closedStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifClosedElse_)
            + toString(this._closedStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifClosedElse_ == child)
        {
            this._ifClosedElse_ = null;
            return;
        }

        if(this._closedStatement_ == child)
        {
            this._closedStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifClosedElse_ == oldChild)
        {
            setIfClosedElse((PIfClosedElse) newChild);
            return;
        }

        if(this._closedStatement_ == oldChild)
        {
            setClosedStatement((PClosedStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
