/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class ANormalBExpr extends PBExpr
{
    private PBExpr2 _bExpr2_;
    private PConcat _concat_;
    private PBExpr _bExpr_;

    public ANormalBExpr()
    {
        // Constructor
    }

    public ANormalBExpr(
        @SuppressWarnings("hiding") PBExpr2 _bExpr2_,
        @SuppressWarnings("hiding") PConcat _concat_,
        @SuppressWarnings("hiding") PBExpr _bExpr_)
    {
        // Constructor
        setBExpr2(_bExpr2_);

        setConcat(_concat_);

        setBExpr(_bExpr_);

    }

    @Override
    public Object clone()
    {
        return new ANormalBExpr(
            cloneNode(this._bExpr2_),
            cloneNode(this._concat_),
            cloneNode(this._bExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANormalBExpr(this);
    }

    public PBExpr2 getBExpr2()
    {
        return this._bExpr2_;
    }

    public void setBExpr2(PBExpr2 node)
    {
        if(this._bExpr2_ != null)
        {
            this._bExpr2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bExpr2_ = node;
    }

    public PConcat getConcat()
    {
        return this._concat_;
    }

    public void setConcat(PConcat node)
    {
        if(this._concat_ != null)
        {
            this._concat_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._concat_ = node;
    }

    public PBExpr getBExpr()
    {
        return this._bExpr_;
    }

    public void setBExpr(PBExpr node)
    {
        if(this._bExpr_ != null)
        {
            this._bExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bExpr2_)
            + toString(this._concat_)
            + toString(this._bExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bExpr2_ == child)
        {
            this._bExpr2_ = null;
            return;
        }

        if(this._concat_ == child)
        {
            this._concat_ = null;
            return;
        }

        if(this._bExpr_ == child)
        {
            this._bExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bExpr2_ == oldChild)
        {
            setBExpr2((PBExpr2) newChild);
            return;
        }

        if(this._concat_ == oldChild)
        {
            setConcat((PConcat) newChild);
            return;
        }

        if(this._bExpr_ == oldChild)
        {
            setBExpr((PBExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
