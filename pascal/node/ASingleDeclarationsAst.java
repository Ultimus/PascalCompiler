/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class ASingleDeclarationsAst extends PAst
{
    private TIdentifier _identifier_;
    private PAst _ast_;

    public ASingleDeclarationsAst()
    {
        // Constructor
    }

    public ASingleDeclarationsAst(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PAst _ast_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setAst(_ast_);

    }

    @Override
    public Object clone()
    {
        return new ASingleDeclarationsAst(
            cloneNode(this._identifier_),
            cloneNode(this._ast_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleDeclarationsAst(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PAst getAst()
    {
        return this._ast_;
    }

    public void setAst(PAst node)
    {
        if(this._ast_ != null)
        {
            this._ast_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ast_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._ast_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._ast_ == child)
        {
            this._ast_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._ast_ == oldChild)
        {
            setAst((PAst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
