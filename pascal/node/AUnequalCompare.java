/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.node;

import pascal.analysis.*;

@SuppressWarnings("nls")
public final class AUnequalCompare extends PCompare
{
    private TUnequal _unequal_;

    public AUnequalCompare()
    {
        // Constructor
    }

    public AUnequalCompare(
        @SuppressWarnings("hiding") TUnequal _unequal_)
    {
        // Constructor
        setUnequal(_unequal_);

    }

    @Override
    public Object clone()
    {
        return new AUnequalCompare(
            cloneNode(this._unequal_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnequalCompare(this);
    }

    public TUnequal getUnequal()
    {
        return this._unequal_;
    }

    public void setUnequal(TUnequal node)
    {
        if(this._unequal_ != null)
        {
            this._unequal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unequal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unequal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unequal_ == child)
        {
            this._unequal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._unequal_ == oldChild)
        {
            setUnequal((TUnequal) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
