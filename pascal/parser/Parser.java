/* This file was generated by SableCC (http://www.sablecc.org/). */

package pascal.parser;

import pascal.lexer.*;
import pascal.node.*;
import pascal.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAst node1 = (PAst) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AProgramHeader */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce ADeclarations */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AEmptyDeclarations */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce ASingleVariablesDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AMultipleVariablesDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AVariablesDefinition */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AType */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list);
            }
            break;
            case 8: /* reduce ABody */
            {
                ArrayList<Object> list = new8();
                push(goTo(6), list);
            }
            break;
            case 9: /* reduce ASingleStatementSequence */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list);
            }
            break;
            case 10: /* reduce AMultipleStatementSequence */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list);
            }
            break;
            case 11: /* reduce AOpenStatement */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list);
            }
            break;
            case 12: /* reduce AClosedStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(8), list);
            }
            break;
            case 13: /* reduce AOpenIfOpenStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list);
            }
            break;
            case 14: /* reduce AOpenWhileOpenStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(9), list);
            }
            break;
            case 15: /* reduce ASimpleClosedStatement */
            {
                ArrayList<Object> list = new15();
                push(goTo(10), list);
            }
            break;
            case 16: /* reduce AClosedIfClosedStatement */
            {
                ArrayList<Object> list = new16();
                push(goTo(10), list);
            }
            break;
            case 17: /* reduce AClosedWhileClosedStatement */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list);
            }
            break;
            case 18: /* reduce AOpenIfOpenIfStatement */
            {
                ArrayList<Object> list = new18();
                push(goTo(11), list);
            }
            break;
            case 19: /* reduce AOpenIfElseOpenIfStatement */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list);
            }
            break;
            case 20: /* reduce AClosedIfStatement */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list);
            }
            break;
            case 21: /* reduce AWhileOOpenWhileStatement */
            {
                ArrayList<Object> list = new21();
                push(goTo(13), list);
            }
            break;
            case 22: /* reduce AWhileCClosedWhileStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(14), list);
            }
            break;
            case 23: /* reduce AWritelnSimpleStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(15), list);
            }
            break;
            case 24: /* reduce AAssignmentSimpleStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(15), list);
            }
            break;
            case 25: /* reduce ABlockSimpleStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(15), list);
            }
            break;
            case 26: /* reduce AEmptySimpleStatement */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list);
            }
            break;
            case 27: /* reduce AIfThenIfStatement */
            {
                ArrayList<Object> list = new27();
                push(goTo(16), list);
            }
            break;
            case 28: /* reduce AEqualCompare */
            {
                ArrayList<Object> list = new28();
                push(goTo(17), list);
            }
            break;
            case 29: /* reduce ALessCompare */
            {
                ArrayList<Object> list = new29();
                push(goTo(17), list);
            }
            break;
            case 30: /* reduce AGreaterCompare */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list);
            }
            break;
            case 31: /* reduce AGreaterEqCompare */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce ALessEqCompare */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list);
            }
            break;
            case 33: /* reduce AUnequalCompare */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list);
            }
            break;
            case 34: /* reduce ASingleExprTop */
            {
                ArrayList<Object> list = new34();
                push(goTo(18), list);
            }
            break;
            case 35: /* reduce AComparisonExprTop */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list);
            }
            break;
            case 36: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new36();
                push(goTo(19), list);
            }
            break;
            case 37: /* reduce AXorExpr */
            {
                ArrayList<Object> list = new37();
                push(goTo(19), list);
            }
            break;
            case 38: /* reduce APlusExpr */
            {
                ArrayList<Object> list = new38();
                push(goTo(19), list);
            }
            break;
            case 39: /* reduce AMinusExpr */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list);
            }
            break;
            case 40: /* reduce AFactorExpr */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list);
            }
            break;
            case 41: /* reduce AAndFactor */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list);
            }
            break;
            case 42: /* reduce AModFactor */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list);
            }
            break;
            case 43: /* reduce AMultFactor */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list);
            }
            break;
            case 46: /* reduce ANotTerm */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list);
            }
            break;
            case 47: /* reduce ANumberTerm */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list);
            }
            break;
            case 48: /* reduce AIdentifierTerm */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce ATrueTerm */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list);
            }
            break;
            case 50: /* reduce AFalseTerm */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list);
            }
            break;
            case 51: /* reduce AUnaryminusIdentifierTerm */
            {
                ArrayList<Object> list = new51();
                push(goTo(21), list);
            }
            break;
            case 52: /* reduce AUnaryplusIdentifierTerm */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list);
            }
            break;
            case 53: /* reduce ABracesTerm */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce ABreakTerm */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PAst pastNode5;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        {
            // Block
        PAst pastNode3;
        pastNode3 = (PAst)nodeArrayList2.get(0);
	if(pastNode3 != null)
	{
	  listNode4.add(pastNode3);
	}
        }
        pastNode5 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AProgramStartAst(pastNode2, listNode4, pastNode5);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AProgramHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        pastNode1 = new AIdentifierAst(tidentifierNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AEmptyDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAst pastNode1;
        {
            // Block

        pastNode1 = new AEmptyDeclarationsAst();
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASingleVariablesDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList2.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMultipleVariablesDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList2.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVariablesDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PAst pastNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AVariablesDefinitionAst(tidentifierNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pastNode1 = new AIntegerAst(tintegerNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ABody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList2.get(0);

        pastNode1 = new ABodyAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASingleStatementSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMultipleStatementSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AStatementSequenceAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AOpenIfOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList1.get(0);

        pastNode1 = new AOpenStatementAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AOpenWhileOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList1.get(0);

        pastNode1 = new AOpenStatementAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASimpleClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList1.get(0);

        pastNode1 = new AClosedStatementAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AClosedIfClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList1.get(0);

        pastNode1 = new AClosedStatementAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AClosedWhileClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList1.get(0);

        pastNode1 = new AClosedStatementAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AOpenIfOpenIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList2.get(0);
        pastNode3 = (PAst)nodeArrayList4.get(0);

        pastNode1 = new AOpenIfStatementAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AOpenIfElseOpenIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        PAst pastNode4;
        pastNode2 = (PAst)nodeArrayList2.get(0);
        pastNode3 = (PAst)nodeArrayList4.get(0);
        pastNode4 = (PAst)nodeArrayList6.get(0);

        pastNode1 = new AOpenIfElseStatementAst(pastNode2, pastNode3, pastNode4);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AClosedIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        PAst pastNode4;
        pastNode2 = (PAst)nodeArrayList2.get(0);
        pastNode3 = (PAst)nodeArrayList4.get(0);
        pastNode4 = (PAst)nodeArrayList6.get(0);

        pastNode1 = new AClosedIfStatementAst(pastNode2, pastNode3, pastNode4);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AWhileOOpenWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList2.get(0);
        pastNode3 = (PAst)nodeArrayList4.get(0);

        pastNode1 = new AOpenWhileStatementAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AWhileCClosedWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList2.get(0);
        pastNode3 = (PAst)nodeArrayList4.get(0);

        pastNode1 = new AClosedWhileStatementAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AWritelnSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AWritelnAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAssignmentSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PAst pastNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AAssignmentAst(tidentifierNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABlockSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList2.get(0);

        pastNode1 = new ABlockAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AEmptySimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAst pastNode1;
        {
            // Block

        pastNode1 = new AEmptyAst();
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIfThenIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList2.get(0);

        pastNode1 = new AIfStatementAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AEqualCompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pastNode1 = new AEqualAst(tequalNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ALessCompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pastNode1 = new ALessAst(tlessNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AGreaterCompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pastNode1 = new AGreaterAst(tgreaterNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AGreaterEqCompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TGreaterEq tgreatereqNode2;
        tgreatereqNode2 = (TGreaterEq)nodeArrayList1.get(0);

        pastNode1 = new AGreaterEqAst(tgreatereqNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALessEqCompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TLessEq tlesseqNode2;
        tlesseqNode2 = (TLessEq)nodeArrayList1.get(0);

        pastNode1 = new ALessEqAst(tlesseqNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AUnequalCompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TUnequal tunequalNode2;
        tunequalNode2 = (TUnequal)nodeArrayList1.get(0);

        pastNode1 = new AUnequalAst(tunequalNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASingleExprTop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AComparisonExprTop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList3.get(0);
        pastNode3 = (PAst)nodeArrayList1.get(0);

        pastNode1 = new AExprTopAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AOrAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AXorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AXorAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new APlusAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AMinusAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAndFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AAndAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AModAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new AMultAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        PAst pastNode3;
        pastNode2 = (PAst)nodeArrayList1.get(0);
        pastNode3 = (PAst)nodeArrayList3.get(0);

        pastNode1 = new ADivAst(pastNode2, pastNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ANotTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList2.get(0);

        pastNode1 = new ANotAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pastNode1 = new ANumberAst(tnumberNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIdentifierTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pastNode1 = new AIdentifierAst(tidentifierNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ATrueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pastNode1 = new ATrueAst(ttrueNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFalseTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pastNode1 = new AFalseAst(tfalseNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AUnaryminusIdentifierTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList2.get(0);

        pastNode1 = new AUnMinusAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AUnaryplusIdentifierTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        pastNode2 = (PAst)nodeArrayList2.get(0);

        pastNode1 = new AUnPlusAst(pastNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ABracesTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList2.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ABreakTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TBreak tbreakNode2;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);

        pastNode1 = new ABreakAst(tbreakNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, },
			{{-1, ERROR, 1}, {37, SHIFT, 4}, },
			{{-1, ERROR, 2}, {39, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {2, SHIFT, 5}, },
			{{-1, ERROR, 4}, {33, SHIFT, 8}, },
			{{-1, ERROR, 5}, {37, SHIFT, 9}, },
			{{-1, ERROR, 6}, {3, SHIFT, 11}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 9}, {32, SHIFT, 13}, },
			{{-1, ERROR, 10}, {33, SHIFT, 14}, },
			{{-1, REDUCE, 26}, {3, SHIFT, 15}, {5, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {37, SHIFT, 19}, },
			{{-1, ERROR, 12}, {34, SHIFT, 29}, },
			{{-1, ERROR, 13}, {6, SHIFT, 30}, },
			{{-1, REDUCE, 4}, {2, SHIFT, 5}, },
			{{-1, REDUCE, 26}, {3, SHIFT, 15}, {5, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {37, SHIFT, 19}, },
			{{-1, ERROR, 16}, {35, SHIFT, 34}, },
			{{-1, ERROR, 17}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 18}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 19}, {24, SHIFT, 49}, },
			{{-1, ERROR, 20}, {0, SHIFT, 50}, {33, SHIFT, 51}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 33}, {0, SHIFT, 52}, {33, SHIFT, 51}, },
			{{-1, ERROR, 34}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 38}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 39}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 40}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 41}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 44}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 34}, {17, SHIFT, 59}, {18, SHIFT, 60}, {20, SHIFT, 61}, {21, SHIFT, 62}, {25, SHIFT, 63}, {26, SHIFT, 64}, {27, SHIFT, 65}, {28, SHIFT, 66}, {29, SHIFT, 67}, {30, SHIFT, 68}, },
			{{-1, REDUCE, 40}, {1, SHIFT, 70}, {16, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 48}, {13, SHIFT, 74}, },
			{{-1, ERROR, 49}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 26}, {3, SHIFT, 15}, {5, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {37, SHIFT, 19}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 53}, {36, SHIFT, 77}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 57}, {36, SHIFT, 78}, },
			{{-1, REDUCE, 26}, {3, SHIFT, 15}, {5, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {37, SHIFT, 19}, },
			{{-1, ERROR, 59}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 60}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 61}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 62}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 69}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 70}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 71}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 72}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, ERROR, 73}, {8, SHIFT, 35}, {9, SHIFT, 36}, {12, SHIFT, 37}, {19, SHIFT, 38}, {20, SHIFT, 39}, {21, SHIFT, 40}, {35, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, },
			{{-1, REDUCE, 26}, {3, SHIFT, 15}, {5, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {37, SHIFT, 19}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 12}, {15, SHIFT, 92}, },
			{{-1, REDUCE, 36}, {1, SHIFT, 70}, {16, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, },
			{{-1, REDUCE, 37}, {1, SHIFT, 70}, {16, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, },
			{{-1, REDUCE, 38}, {1, SHIFT, 70}, {16, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, },
			{{-1, REDUCE, 39}, {1, SHIFT, 70}, {16, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 26}, {3, SHIFT, 15}, {5, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {37, SHIFT, 19}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 6}, },
			{{-1, 7}, {14, 32}, },
			{{-1, 10}, },
			{{-1, 31}, },
			{{-1, 12}, },
			{{-1, 20}, {15, 33}, },
			{{-1, 21}, {51, 76}, {58, 79}, },
			{{-1, 22}, {74, 90}, {92, 93}, },
			{{-1, 23}, {58, 80}, {74, 91}, {92, 94}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, -1}, },
			{{-1, 69}, },
			{{-1, 44}, {18, 48}, {34, 53}, {41, 57}, {49, 75}, {69, 85}, },
			{{-1, 45}, },
			{{-1, 46}, {59, 81}, {60, 82}, {61, 83}, {62, 84}, },
			{{-1, 47}, {38, 54}, {39, 55}, {40, 56}, {70, 86}, {71, 87}, {72, 88}, {73, 89}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: program",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: var, begin",
			"expecting: ';'",
			"expecting: begin",
			"expecting: ':'",
			"expecting: end, begin, writeln, if, while, ';', identifier",
			"expecting: '.'",
			"expecting: integer",
			"expecting: '('",
			"expecting: true, false, break, not, '+', '-', '(', identifier, number",
			"expecting: ':='",
			"expecting: end, ';'",
			"expecting: end, else, ';'",
			"expecting: end, div, do, then, else, and, or, xor, '+', '-', '*', '%', '=', '<', '>', '<=', '>=', '<>', ';', ')'",
			"expecting: then",
			"expecting: end, do, then, else, or, xor, '+', '-', '=', '<', '>', '<=', '>=', '<>', ';', ')'",
			"expecting: do",
			"expecting: ')'",
			"expecting: end, begin, writeln, if, while, else, ';', identifier",
			"expecting: end, do, then, else, ';', ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 3, 6, 4, 7, 8, 9, 3, 7, 10, 11, 11, 12, 13, 13, 13, 13, 13, 14, 13, 14, 14, 2, 4, 4, 5, 13, 11, 15, 15, 15, 11, 11, 11, 11, 15, 15, 16, 17, 15, 15, 18, 11, 8, 7, 14, 19, 15, 15, 15, 19, 20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 20, 14, 13, 14, 15, 13, 14, 15, 15, 15, 15, 21, 15, 15, 15, 15, 13, 14, 20, 13, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
